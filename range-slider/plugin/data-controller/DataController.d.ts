import ChangeStateTypes from '../../models/enums/ChangeStateTypes';
import PluginActions from '../../models/enums/PluginActions';
import { UserOptions } from '../../models/interfaces';
import { Actions, HandlerParametrs, HandlerState, PaddingParametrs, RootState, ScaleOptions, SliderParametrs } from '../../models/types';
export default class DataController {
    private handlerParametrs;
    private sliderParametrs;
    private scaleSize;
    private options;
    private actions;
    private trigger;
    constructor(trigger: (actions: PluginActions, ...args: Array<Object>) => void, userOptions?: UserOptions);
    getBindElelementPaddingParametrs: () => PaddingParametrs;
    getScaleOptions: () => ScaleOptions;
    createTooltips: () => boolean;
    createProgressBar: () => boolean;
    createScale: () => boolean;
    getOrientation: () => number;
    getNumberOfHandlers: () => number;
    getHandlerBottom: () => number;
    getSliderLength: () => number;
    getHandlerLength: () => number;
    getHandlerStartPosition: () => number;
    getEventNames: () => Actions;
    setSliderParametrs: (parametrs: SliderParametrs) => void;
    setHandlerParametrs: (parametrs: HandlerParametrs) => void;
    initState: () => RootState;
    changeState: (type: ChangeStateTypes, state: RootState, newUserposition: number, id: number) => RootState;
    updateLimits: (states: Array<HandlerState>) => Array<HandlerState>;
    private updateOptions;
    private changeStateWhenChangePosition;
    private getClosestHandlerId;
    private getStepLength;
    private convertValueToPosition;
    private convertPositionToValue;
    private getMinValuesRange;
    private getCount;
    private checkOptions;
    private setScaleSize;
}
